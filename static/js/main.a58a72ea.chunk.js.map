{"version":3,"sources":["data.js","Detail.js","App.js","reportWebVitals.js","index.js"],"names":["id","title","content","price","박스","styled","div","제목","h4","probs","색상","Detail","useState","알람","인풋","인풋저장","useParams","history","useHistory","shoes_id","신발","className","onChange","e","target","value","Alert1","src","width","Info","재고","onClick","재고변경","goBack","Card","item_number_init","i","console","log","Col","App","Data","신발변경","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","as","to","NavDropdown","Item","Divider","exact","path","Jumbotron","Button","variant","Container","Row","map","슈즈","axios","post","pw","get","then","result","data","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a58a72ea.chunk.js","sourcesContent":["//var name = \"Kim\";\n//var name2 = \"Park\";\n//export { name, name2 }\n//export default name\n\nexport default [\n    {\n      id : 0,\n      title : \"White and Black\",\n      content : \"Born in France\",\n      price : 120000\n    },\n  \n    {\n      id : 1,\n      title : \"Red Knit\",\n      content : \"Born in Seoul\",\n      price : 110000\n    },\n  \n    {\n      id : 2,\n      title : \"Grey Yordan\",\n      content : \"Born in the States\",\n      price : 130000\n    }\n  ]\n\n  // export default 변수명\n        // 이건 내보내기 기능, 하지만, 파일상태로 가져오는건 한번만 가능하다.\n","// 컴포넌트 파일 만들 때는 import React 꼭 해오십시오?\n// component명은 주로 대문자로 만드는 것이 관습이다.\n// react-router-dom v5 이상, react v16.3 이상.\nimport React, { useState, useEffect } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport './Detail.scss';\n// CSS IN JS\nimport styled from 'styled-components';\n\n// css를 미리 입혀놓은 컴포넌트를 쓴다.\nlet 박스 = styled.div`\n    padding : 20px;\n`;\nlet 제목 = styled.h4`\n    font-size : 25px;\n    color : ${ probs => probs.색상 }\n`; // 자바스크립트 문자, 글자 변수명 글자<- 변수명 집어넣을 수 있게 해주는거 $\n   // probs로 색상을 넘겨준다.\n\n// `` 이거 입력.\n\n// // 옛날 훅\n// class Detail2 extends React.Component{\n//     componentDidMount(){\n// // 마운트가 되었을때 특정 코드를 실행히주세요.\n// // Ajax 같은 것도 이런 곳에 자주 사용 \n//     }\n//     componentWillUnmount(){\n// // 컴포넌트가 더 이상 내 시야에서 사라질때\n//     }\n\n// }\n\n\nfunction Detail(probs){\n\n    let [알람, 알람변경] = useState(false); // Modal을 켜고 닫는 스위치.\n    let [인풋, 인풋저장] = useState(); // input에 입력한 데이터를 state에 저장하려고 한다면?\n\n    // 새로운 hook, 컴포넌트가 실행(mount)될때, 컴포넌트가 업데이트 될때 특정 코드를 실행 할 수 있따.\n    // useEffect(()=>{\n    //     console.log(11111)\n    //     // 2초 후에 alert창을 사라지게 만들기.\n    //   let 타이머 = setTimeout(()=>{\n    //         알람변경(true);\n    //     },2000) // 2000ms\n    // });// detail이 사라질때, 특정 페이지로 이동시키려면?\n\n    // useEffect(()=>{\n\n    //     axios.get(); // 이렇게 하면 Detail.js가 등장/업데이트 했을때, 작동\n\n    // },[]);// []이렇게 하면 업데이트시에는 실행 안되게끔.\n\n    // 컴포넌트 등장, 업데이트시 useEffect적용된다.\n    // useEffect(()=>{\n        \n    //     return function 어쩌구(){\n    //     //사라질때 이게 실행된다는데?\n    //     }// unMount일때 실행을 해준다.\n    // },[알람]);// detail이 사라질때, 특정 페이지로 이동시키려면?\n//   [] useEffect가 실행될 조건, [알람]를 넣으면, [알람]이 변경 될때만 실행이 된다.\n// 그냥 [] 이렇게 해놓으면, 실행안됨, 딱 한번만 실행됐을때 나오기는 한다 )트릭(\n\n// setTimeout() 2초 되기전에 뒤로가기 눌렀을때, 버그같은거 생길 수 있으므로, setTimeout 같은건 , return 할때, 타이머를 제거를 해주면된다.\n    // useEffect(()=>{\n    //     return ()=>{ clearTimeout(타이머)\n    //     //사라질때 이게 실행된다는데?\n    //     }// unMount일때 실행을 해준다.\n    // });// detail이 사라질때, 특정 페이지로 이동시키려면?\n// 여러게 써도 되는데, 위에서 아래로 순서대로 실행된다.\n\n\n\n    let { id } = useParams();\n    // hook이라는 아이, 사용자가 입력한 URL파라미터들\n    // url에 입력한 id가 여기 값이다.\n\n    let history = useHistory();\n    // 모든 방문기록이 담겨있는것이다.\n\n    let shoes_id = probs.신발[id].id + 1;\n\n    return(\n    <div className=\"container\">\n        <박스>\n        <제목 색상={'red'}>상세페이지</제목>\n        <제목 className = \"red\" >상세페이지</제목>\n        패딩이 20px인 div가 탄생했다.\n        </박스>\n\n        <input onChange={(e)=>{\n            인풋저장(e.target.value)\n        }} />\n    {/* // e는 현재 입력된 값 , 입력할때마다 재렌더링이 일어난다. */}\n    { 인풋 }\n\n    {   알람 === false\n        ?  <Alert1></Alert1>\n        : null\n    }\n\n        <div className=\"row\">\n            <div className=\"col-md-6\">\n                {/* <img src=\"https://codingapple1.github.io/shop/shoes1.jpg\" width=\"100%\" /> */}\n                <img src= {'https://codingapple1.github.io/shop/shoes' + shoes_id + '.jpg'} width=\"100%\" />\n            </div>\n            <div className=\"col-md-6 mt-4\">\n               <h4 className=\"pt-5\">{probs.신발[probs.신발[id].id].title}</h4>\n                <p>{probs.신발[probs.신발[id].id].content}</p>\n                <p>{probs.신발[probs.신발[id].id].price}원</p>\n\n                <Info 재고 = {probs.재고[0]} ></Info>\n                {/* // 재고 몇갠지 파악  Detail내의 <Info>에 데이터바인딩 -> App-> Detail -> Info / redux, usecontext 쓰면 안거쳐도 된다. */}\n\n                {/* //변경까지 하고 싶으면, 변경하는 애도 같이 프롭스로 보내줘야된다 */}\n                <button className=\"btn btn-danger\" onClick={()=>{ probs.재고변경([9,10,12])\n                                                                    // 사본으로 빼고, 변경하는게 원래는 해야될 일.\n                }}>주문하기</button> \n                <button className=\"btn btn-danger\" onClick={()=>{\n                history.goBack();\n                // 뒤로가기\n                // history.push('/sdfsdf'); <~ 이 경로로 이동\n                }}>뒤로가기</button> \n            </div>\n            \n        </div>\n        \n    </div>\n\n    \n    )\n};\nexport default Detail;\n// 이 이름으로 내보내겠소. Detail을 내보내겠소.\n\n\nfunction Alert1(){\n\n    return(\n    \n        <div className=\"my-alert\">\n        <p>재고가 얼마 남지 않았습니다</p>\n        </div>\n\n    );\n}\n\nfunction Info(probs){\n    return(\n        <p>재고 : {probs.재고}</p>\n    )\n}\n","/* eslint-disable */\n\nimport React, { useState } from 'react'\n// state를 쓰려면 이게 필요하다. useState\nimport './App.css';\n\n\n// 추가한 내용\n//import { name, name2} from './data.js'; // \"./\"는 현재경로를 말한다.\n//import name from './data.js'\n//import Data from './data'\nimport Data from './data'\nimport {Link, Route, Switch} from 'react-router-dom'\n// routing을 하기 위한 것.\n\nimport Detail from './Detail.js';\nimport { Nav,Navbar,NavDropdown,Button,Jumbotron,Container,Row,Col } from 'react-bootstrap';\nimport axios from 'axios';\n// 서버에 ajax 요청을 해서 상품 데이터 3개를 더 가져올 것이다(튜토리얼)\n\nfunction App() {\n\n  let [더보기온오프,더보기온오프변경] = useState(false);\n  let [신발, 신발변경] = useState(Data);\n  let [더보기신발, 더보기신발변경] = useState();\n  let [imgUrl,imgUrl변경] = useState([\"https://codingapple1.github.io/shop/shoes1.jpg\",\"https://codingapple1.github.io/shop/shoes2.jpg\",\"https://codingapple1.github.io/shop/shoes3.jpg\"]);\n  let [재고,재고변경] = useState([10,11,12]);// 컴포넌트 3개 중첩해서 만들면 state 전달은 어떻게 하죠?\n  // 다른 js 파일에다가 저장해놓고 불러오기.\n\n  return (\n    <div className=\"App\">\n              <Navbar bg=\"light\" expand=\"lg\">\n                <Navbar.Brand href=\"#home\">React-Bootstrap</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                  <Nav className=\"mr-auto\">\n                    <Nav.Link as = {Link} to=\"/\">Home</Nav.Link>\n                    <Nav.Link as = {Link} to=\"/Detail\">Detail</Nav.Link>\n                    {/* a태그에 a태그 넣은 격 */}\n                    <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\n                      <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n                      <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\n                      <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\n                      <NavDropdown.Divider />\n                      <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\n                    </NavDropdown>\n                  </Nav>\n                </Navbar.Collapse>\n              </Navbar>\n\n  {/* 중복이 피해지도록 해주는 것이 Switch이다. */}\n  <Switch>\n\n        {/* exact는 정확히 주소가 일치할때 보여준다 */}\n        {/* 라우팅 하는 법을 보자 */}\n        <Route exact path=\"/\">\n\n          {/* 사이트대문 만들기 - Jumbotron START*/}\n          <Jumbotron className=\"background\">\n                        <h1>20% Season OFF</h1>\n                        <p>\n                          This is a simple hero unit, a simple jumbotron-style component for calling\n                          extra attention to featured content or information.\n                        </p>\n                        <p>\n                          <Button variant=\"primary\">Learn more</Button>\n                        </p>\n                      </Jumbotron>\n          {/* 사이트대문 만들기 - Jumbotron END*/}\n\n          {\n                  <Container>\n                        <Row>\n                          {\n                          신발.map( (슈즈,i) => {\n                          return <Card 신발={슈즈} i={i} key={i}/>\n                          })//return fin, key는 꼭 써줘야된다.\n\n                          \n                          }\n                        </Row>\n                        <button className=\"btn btn-primary\" onClick={()=>{\n                          // 로딩중이라는 UI 띄움\n\n                          // Detail 컴포넌트 로드시 ajax로 데이터를 가져오고 싶다면?\n\n                                                        // 서버에 데이터를 보내고 싶을때 post방법\n                              axios.post('서버 URL', {id : 'codingapple', pw : 1234}); \n                              // 요청시의 header 설정도 가능하다.\n\n                              axios.get('http://codingapple1.github.io/shop/data2.json') // 데이터만 가져오려면 result.data\n                              .then((result)=>{ console.log(result.data) \n                                // 로딩중이라는 UI 안보이게 처리\n                                console.log('성공했다.')\n                                신발변경([...신발, ...result.data]); // 이렇게하면 신발은 [{},{},{}]이 된다. -> 즉 {},{},{} 이렇게 된다. 6개의 아이템으로 바뀜.\n                                // ...신발은 대괄호를 벗겨주세요.라는 뜻 거기에 []를 붙이면, 완전히 새롭게 탄생한 카피본\n                              })// 서버한테 get요청, 데이터 요청할 URL, 서버개발자한테 물어보면된다.\n                              .catch(()=>{ console.log('실패했다.') })        // 신발 데이터랑 유사한거 날라올거야. 이렇게하면 새로고침 없이 데이터 가져올 수 있다. ajax 성공하면.then()\n                              // 여기서도 로딩중이라는 UI를 안보이게 처리\n                              // 같은건 fetch('http://codingapple1.github.io/shop/data2.json').then <- 근데 쌩 자바스크립트이다. 근데 호환성이 좀 떨어진다. 데이터는 JSON형식\n                              // axios를 쓰면, JSON을 Object로 알아서 바꿔준다. 패치는 오브젝트 작업도 해줘야된다.\n\n                            }}>더보기</button>\n                            {/* // 더보기를 2번째 누르면 새로운 URL로 데이터 요청을 하고 싶다면? 변수나 state로 누른 횟수를 저장해두고, state를 url에 집어넣으면된다. */}\n\n                    \n                          {/*  */}\n                  </Container>\n                }\n\n\n        </Route>\n        {/* //////////////////////////////////////////////// */}\n        {/* www.메인페이지주소/detail/0 이런식으로 상세페이지를 만들 것이다. */}\n        {/* <Route path=\"/detail\"> */}\n          {/* <div>디테일페이지입니다.</div> */}\n          {/* <Detail 신발={신발}></Detail> */}\n          {/* 데이터바인딩을 위해서 신발 데이터를 Detail로 보내준다. */}\n        {/* </Route> */}\n        {/* <Router path=\"/어쩌구\" component={Modal}></Router> */}\n\n        {/* /detail/:id/:id2 */}\n        <Route path=\"/detail/:id\">\n          <Detail 신발={신발} 재고={재고} 재고변경={재고변경} />\n          {/* 데이터바인딩을 위해서 신발 데이터를 Detail로 보내준다. */}\n        </Route>\n\n\n        <Route path=\"/:id\">\n          <div>아무거나적었을때 이거 보여주시오.</div>\n        </Route>\n\n  </Switch>\n\n{/* 3등분으로 나누기, 그리고 가져온 데이터(어레이)를 넣어서 자리를 찾아주는 일을 바인딩이라고 한다. */}\n        {/* <div className=\"container\">\n          <div className=\"row\">\n          <div className=\"col-md-4\">\n            <img src=\"https://codingapple1.github.io/shop/shoes1.jpg\" width=\"100%\" />\n            <h4>{ 신발[0].title }</h4>\n            <p>{ 신발[0].content }</p>\n          </div>\n          <div className=\"col-md-4\">\n            <img src=\"https://codingapple1.github.io/shop/shoes2.jpg\" width=\"100%\" />\n            <h4>{신발[1].title}</h4>\n            <p>{ 신발[1].content }</p>\n          </div>\n          <div className=\"col-md-4\">\n            <img src=\"https://codingapple1.github.io/shop/shoes3.jpg\" width=\"100%\" />\n            <h4>{신발[2].title}</h4>\n            <p>{ 신발[2].content }</p>\n          </div>           \n          </div>\n        </div> */}\n\n\n         {/* {\n          <Container>\n                <Row>\n                  {신발.map( (슈즈,i) => {\n                  return(\n                          <Col><img src={imgUrl[i]} width=\"100%\" />\n                          <h4>{ 슈즈.title }</h4>\n                          <p>{ 슈즈.content }</p></Col>\n                  )})//return fin\n                  }\n                </Row>\n           </Container>\n         } */}\n\n    </div>\n  );\n}\n\n\n// 컴포넌트란 이런 컴포넌트를 말한다.\nfunction Card(probs){\n    var item_number_init = 0\n    item_number_init = probs.i + 1;\n    console.log(probs.i);\n    return(      \n            <Col><img src={ 'https://codingapple1.github.io/shop/shoes' + item_number_init  + '.jpg'} width=\"100%\" />\n            <h4>{ probs.신발.title }</h4>\n            <p>{ probs.신발.content } / { probs.신발.price }</p></Col>\n    )//return fin\n}// Card(probs)\n\nexport default App;\n\n\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport { HashRouter } from 'react-router-dom'; // 라이브러리 이름\n// HashRouter #이 추가되고, 이런식으로 라우팅을 한다.\n// HashRouter가 좀더 안전하게 가능\n// 서버에게 요청할때 /ab, /abc 이런건 리엑트가 알아서하는데,\n// localhost:3000이 메인페이지는 서버랑 커뮤니케이션 한다. 그래서, 실수로 서버에게 요청을 해버리는 상황이 생길수있다.\n// HashRouter를 쓰는게 더 안정적이다.\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n    <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}